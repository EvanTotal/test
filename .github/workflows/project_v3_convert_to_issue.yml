name: Inherit Labels, Assignees & Status from Project V2 Row

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  inherit_metadata:
    runs-on: ubuntu-latest
    steps:
      - name: Inherit metadata from Project V2
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issueNumber = context.payload.issue.number;
            const issueNodeId = context.payload.issue.node_id;
            const { owner, repo } = context.repo;

            const projectId = "PVT_kwHODd007c4BEBb_"; // replace with your Project V2 ID

            // Function to fetch all project items with pagination
            async function fetchAllProjectItems(projectId) {
              let allItems = [];
              let hasNextPage = true;
              let endCursor = null;

              while (hasNextPage) {
                const query = `
                  query($projectId: ID!, $after: String) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 50, after: $after) {
                          pageInfo { hasNextPage endCursor }
                          nodes {
                            id
                            content { ... on Issue { id } }
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldTextValue {
                                  text
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldUserValue {
                                  users(first: 5) { nodes { login } }
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldIterationValue {
                                  title
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldDateValue {
                                  date
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const variables = { projectId, after: endCursor };
                const result = await github.graphql(query, variables);
                const itemsData = result.node.items.nodes;
                allItems = allItems.concat(itemsData);
                hasNextPage = result.node.items.pageInfo.hasNextPage;
                endCursor = result.node.items.pageInfo.endCursor;
              }

              return allItems;
            }

            const allItems = await fetchAllProjectItems(projectId);

            // Find this issue's row
            const row = allItems.find(n => n.content && n.content.id === issueNodeId);
            if (!row) {
              console.log("❌ No matching Project V2 row found. Exiting.");
              return;
            }

            let labelsFromProject = [];
            let assigneesFromProject = [];

            for (const fieldNode of row.fieldValues.nodes) {
              if (!fieldNode || !fieldNode.field) continue;
              const fieldName = fieldNode.field.name;

              if (fieldName === "Labels") {
                if (fieldNode.text) {
                  labelsFromProject = fieldNode.text.split(",").map(s => s.trim());
                } else if (fieldNode.name) {
                  labelsFromProject.push(fieldNode.name);
                }
              }

              if (fieldName === "Assignees" && fieldNode.users) {
                assigneesFromProject = fieldNode.users.nodes.map(u => u.login);
              }

              if (fieldName === "Status" && fieldNode.name) {
                labelsFromProject.push(`Status: ${fieldNode.name}`);
              }
            }

            console.log("Labels to add:", labelsFromProject);
            console.log("Assignees to add:", assigneesFromProject);

            if (labelsFromProject.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: issueNumber,
                labels: labelsFromProject
              });
            }

            if (assigneesFromProject.length > 0) {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: issueNumber,
                assignees: assigneesFromProject
              });
            }

            console.log("✅ Metadata (Labels, Assignees, Status) inherited!");
