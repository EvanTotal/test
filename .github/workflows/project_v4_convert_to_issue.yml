name: Inherit Labels, Assignees, Milestone & Project Card

on:
  issues:
    types: 
      - opened
      - converted_to_issue  # triggers when a PR is converted to an issue

permissions:
  issues: write
  contents: read
  repository-projects: write

jobs:
  inherit_metadata:
    runs-on: ubuntu-latest
    steps:
      - name: Inherit metadata from Project V2
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issueNumber = context.payload.issue.number;
            const issueNodeId = context.payload.issue.node_id;
            const { owner, repo } = context.repo;

            const projectId = "PVT_kwHODd007c4BEBb_"; // replace with your Project V2 ID

            // Fetch all project items (with pagination)
            async function fetchAllProjectItems(projectId) {
              let allItems = [];
              let hasNextPage = true;
              let endCursor = null;

              while (hasNextPage) {
                const query = `
                  query($projectId: ID!, $after: String) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 50, after: $after) {
                          pageInfo { hasNextPage endCursor }
                          nodes {
                            id
                            content { ... on Issue { id } }
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldTextValue {
                                  text
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldUserValue {
                                  users(first: 5) { nodes { login } }
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldIterationValue {
                                  title
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                                ... on ProjectV2ItemFieldDateValue {
                                  date
                                  field { ... on ProjectV2FieldCommon { name } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                const variables = { projectId, after: endCursor };
                const result = await github.graphql(query, variables);
                allItems = allItems.concat(result.node.items.nodes);
                hasNextPage = result.node.items.pageInfo.hasNextPage;
                endCursor = result.node.items.pageInfo.endCursor;
              }

              return allItems;
            }

            const allItems = await fetchAllProjectItems(projectId);

            // Find the row for this issue
            const row = allItems.find(n => n.content && n.content.id === issueNodeId);
            if (!row) {
              console.log("❌ No matching Project V2 row found. Exiting.");
              return;
            }

            let labels = [];
            let assignees = [];
            let milestoneName = null;
            let projectNames = [];

            for (const fieldNode of row.fieldValues.nodes) {
              if (!fieldNode || !fieldNode.field) continue;
              const fieldName = fieldNode.field.name;

              // Labels
              if (fieldName === "Labels") {
                if (fieldNode.text) labels = fieldNode.text.split(",").map(s => s.trim());
                else if (fieldNode.name) labels.push(fieldNode.name);
              }

              // Assignees
              if (fieldName === "Assignees" && fieldNode.users) {
                assignees = fieldNode.users.nodes.map(u => u.login);
              }

              // Milestone
              if (fieldName === "Milestone" && fieldNode.name) {
                milestoneName = fieldNode.name;
              }

              // Projects
              if (fieldName === "Projects" && fieldNode.text) {
                projectNames = fieldNode.text.split(",").map(s => s.trim());
              }
            }

            console.log("Labels:", labels);
            console.log("Assignees:", assignees);
            console.log("Milestone:", milestoneName);
            console.log("Projects:", projectNames);

            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: issueNumber, labels });
            }

            // Apply assignees
            if (assignees.length > 0) {
              await github.rest.issues.addAssignees({ owner, repo, issue_number: issueNumber, assignees });
            }

            // Apply milestone
            if (milestoneName) {
              const milestones = await github.rest.issues.listMilestones({ owner, repo, state: "all" });
              const milestone = milestones.data.find(m => m.title === milestoneName);
              if (milestone) {
                await github.rest.issues.update({ owner, repo, issue_number: issueNumber, milestone: milestone.number });
              }
            }

            // Apply project cards
            for (const projectName of projectNames) {
              const projects = await github.rest.projects.listForRepo({ owner, repo });
              const project = projects.data.find(p => p.name === projectName);
              if (!project) continue;

              const columns = await github.rest.projects.listColumns({ project_id: project.id });
              if (columns.data.length === 0) continue;

              await github.rest.projects.createCard({ 
                column_id: columns.data[0].id, 
                content_id: context.payload.issue.id, 
                content_type: "Issue" 
              });
            }

            console.log("✅ Metadata (Labels, Assignees, Milestone, Project Cards) inherited!");
